#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

class DSU {
public:
    vector<int> parent, size, rank;

    DSU(int n) {
        parent.resize(n + 1);
        size.resize(n + 1, 1);
        rank.resize(n + 1);

        for (int i = 0; i <= n; i++) {
            parent[i] = i;
        }
    }

    int find(int v) {
        if (parent[v] == v) {
            return v;
        }
        return parent[v] = find(parent[v]);
    }

    void UnionBySize(int u, int v) {
        u = find(u);
        v = find(v);
        if (u != v) {
            if (size[u] < size[v]) {
                swap(u, v);
            }
            parent[v] = u;
            size[u] += size[v];
        }
    }

    void UnionByRank(int u, int v) {
        u = find(u);
        v = find(v);
        if (u != v) {
            if (rank[u] < rank[v]) {
                swap(u, v);
            }
            parent[v] = u;
            if (rank[u] == rank[v]) {
                rank[u]++;
            }
        }
    }
};

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        int m = graph[0].size();

        DSU ds(n);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (graph[i][j] == 1 && ds.find(i) != ds.find(j)) {
                    ds.UnionBySize(i, j);
                }
            }
        }

        vector<int> infected(n, 0);
        for (auto x : initial) {
            int p = ds.find(x);
            infected[p]++;
        }

        int maxima = -1;
        int ind = -1;
        for (auto x : initial) {
            int p = ds.find(x);
            if (infected[p] == 1) {
                if (ds.size[p] > maxima || (ds.size[p] == maxima && x < ind)) {
                    ind = x;
                    maxima = ds.size[p];
                }
            }
        }

        if (ind == -1) {
            return *min_element(begin(initial), end(initial));
        }

        return ind;
    }
};
